import smbus
import math
import time 
# import pandas as pd
import numpy as np
import os
import pyrebase
from flask import Flask, jsonify
from flask import Flask, request, jsonify
import requests
app = Flask(__name__)

config = {

    "apiKey": "AIzaSyDIAFBwmKmGt-B2RPBcl-ZjHuRGo-R1JZ0",
    "authDomain": "gix-510.firebaseapp.com",
    "databaseURL": "https://gix-510.firebaseio.com",
    "projectId": "gix-510",
    "storageBucket": "gix-510.appspot.com",
    "messagingSenderId": "721539835802"
  }
firebase = pyrebase.initialize_app(config)

auth= firebase.auth();
# user= auth.sign_in_anonymous();	

db = firebase.database()
#accelorometer and gyroscope data collecting
power_mgmt_1 = 0x6b
power_mgmt_2 = 0x6c

def read_byte(reg):
    return bus.read_byte_data(address, reg)
 
def read_word(reg):
    h = bus.read_byte_data(address, reg)
    l = bus.read_byte_data(address, reg+1)
    value = (h << 8) + l
    return value
 
def read_word_2c(reg):
    val = read_word(reg)
    if (val >= 0x8000):
        return -((65535 - val) + 1)
    else:
        return val
 
def dist(a,b):
    return math.sqrt((a*a)+(b*b))
 
def get_y_rotation(x,y,z):
    radians = math.atan2(x, dist(y,z))
    return -math.degrees(radians)

def get_x_rotation(x,y,z):
    radians = math.atan2(y, dist(x,z))
    return math.degrees(radians)

#writing collected data into a 3d array

def collecting():
    # target = 0
    # output = []
    dataset = []
    start = time.time()
    ######  collect data once in a while  ####

    ##########################################
    for i in range(15):
        print("Gyroscope")
        print("--------")
         
        gyroskop_xout = read_word_2c(0x43)
        gyroskop_yout = read_word_2c(0x45)
        gyroskop_zout = read_word_2c(0x47)

        print ("gyroscope_xout: ", ("%5d" % gyroskop_xout), " scale: ", (gyroskop_xout / 131))
        print ("gyroscope_yout: ", ("%5d" % gyroskop_yout), " scale: ", (gyroskop_yout / 131))
        print ("gyroscope_zout: ", ("%5d" % gyroskop_zout), " scale: ", (gyroskop_zout / 131))
        
        print ("Acceleration")
        print ("---------------------")
         
        beschleunigung_xout = read_word_2c(0x3b)
        beschleunigung_yout = read_word_2c(0x3d)
        beschleunigung_zout = read_word_2c(0x3f)
         
        beschleunigung_xout_skaliert = beschleunigung_xout / 16384.0
        beschleunigung_yout_skaliert = beschleunigung_yout / 16384.0
        beschleunigung_zout_skaliert = beschleunigung_zout / 16384.0
         
        # print ("accel_xout: ", ("%6d" % beschleunigung_xout), " scale: ", beschleunigung_xout_skaliert)
        # print ("accel_yout: ", ("%6d" % beschleunigung_yout), " scale: ", beschleunigung_yout_skaliert)
        # print ("accel_zout: ", ("%6d" % beschleunigung_zout), " scale: ", beschleunigung_zout_skaliert)
        print ("accel_xout: ",  beschleunigung_xout_skaliert)
        print ("accel_yout: ",  beschleunigung_yout_skaliert)
        print ("accel_zout: ",  beschleunigung_zout_skaliert)
         

        print ("X Rotation: " , get_x_rotation(beschleunigung_xout_skaliert, beschleunigung_yout_skaliert, beschleunigung_zout_skaliert))
        print ("Y Rotation: " , get_y_rotation(beschleunigung_xout_skaliert, beschleunigung_yout_skaliert, beschleunigung_zout_skaliert))


        # data = [gyroskop_xout, gyroskop_yout, gyroskop_zout, beschleunigung_xout, beschleunigung_yout, beschleunigung_zout]
        data = [gyroskop_xout / 131, gyroskop_yout/ 131, gyroskop_zout/ 131, beschleunigung_xout_skaliert, beschleunigung_yout_skaliert, beschleunigung_zout_skaliert]
        dataset.append(data)
        time.sleep(0.1)
        # print("total time: ", time.time() - start)

    # output.append(dataset)
    # output.append(target)
    return dataset



# def data_receiving():

# 	dataset = db.get().val()
# 	print("#####################")
# 	print("receiving data is :")
# 	print(dataset)
# 	print("#####################")

bus = smbus.SMBus(1) # bus = smbus.SMBus(0) fuer Revision 1
address = 0x68       # via i2cdetect
 
# Aktivieren, um das Modul ansprechen zu koennen
bus.write_byte_data(address, power_mgmt_1, 0)
process = time.time()

# app = Flask(__name__)

# @app.route("/",methods = ['POST', 'GET'])
# def upload(data):
#     return jsonify({'data': data})

# app.run(host='0.0.0.0', port=5000)


while(True):
	dataset = collecting()
	# upload(dataset)
	r = requests.post("http://10.18.223.209:8080/", json={"data":dataset})
	db.update({"dataset": [dataset]})



		




